import json
import os
import sys

import click
import traceback
from  exps_routine import run_experiment


@click.command()
@click.option('--config_file', '-p', default=os.path.join('', 'input/config/hyperparameters.json'),
              help="Path to the config file (json) that contains the parameters for the experiment.")
@click.option('--output_path', '-o',
              help="Location for saving the training results (model artifacts and output files).")
def main(config_file, output_path):
    print('Starting the training.')
    os.makedirs(output_path, exist_ok=True)
    try:
        # Read in any hyperparameters that the user passed with the training job
        # Depending on how you set the hyperparameters
        train_params = {}
        config_id, _ = os.path.splitext(os.path.basename(config_file))
        with open(config_file, 'r') as tc:
            train_params = json.load(tc)
        # the function below does all the data loading, run, validate and test_ddi the algo
        run_experiment(**train_params, output_path=output_path, config_id=config_id)
        print(f"Launching with {train_params}")

    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write(f'Exception during training: {str(e)}' + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' +
              str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    main()
